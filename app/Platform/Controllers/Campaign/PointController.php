<?php

namespace Platform\Controllers\Campaign;

use App\Http\Controllers\Controller;
use App\Customer;
use Platform\Models\Code;
use Platform\Models\History;
use App\Jobs\ProcessMerchantSendMail;
use Illuminate\Http\Request;
use Illuminate\Support\Str;
use App\Models\EmailTemplate;
use App\Repositories\NotifPusherRepositories;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Carbon;

use Platform\Models\Campaign;
/**
 * @group Customer Point
 *
 * Endpoints related to redeeming points for customer
 * @package Platform\Controllers\Campaign
 */
class PointController extends Controller {

    private $notifPusher;

    public function __construct(NotifPusherRepositories $notifPusher)
    {
        $this->notifPusher = $notifPusher;
    }
    /*
     |--------------------------------------------------------------------------
     | Points related functions
     |--------------------------------------------------------------------------
     */

    /**
     * Get customer points.
     * @queryParam uuid string required uuid of website. Example: 283ca865-a71c-4d4a-b8cb-8c46c5b3ca57
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function getCustomerPoints(Request $request)
    {


        $campaign = Campaign::withoutGlobalScopes()->whereUuid(
            request('uuid', 0)
        )->firstOrFail();

        $user = Customer::withoutGlobalScopes()->where(
            'id', auth('customer')->id()
        )->where(
            'campaign_id', $campaign->id
        )->firstOrFail();

        return response()->json($user->points);
    }

    /**
     * Get code used to claim points with a link (e.g. QR code).
     * @bodyParam uuid string required uuid of website. Example: 283ca865-a71c-4d4a-b8cb-8c46c5b3ca57
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function postGetClaimToken(Request $request)
    {
        // $account = app()->make('account');

        $campaign = \Platform\Models\Campaign::withoutGlobalScopes()
            ->whereUuid(request('uuid', 0))
            ->firstOrFail();

        // First, delete existing codes
        Code::query()
            ->where('type', 'token')
            ->where('customer_id', auth('customer')->id())
            ->delete();

        // Add generated code to codes table, expire in 1 hour
        $token = $this->getUniqueCode('token', $campaign->id);

        $expires_at = Carbon::now()->addHours(1);

        $code = new Code;
        $code->campaign_id = $campaign->id;
        $code->customer_id = auth('customer')->id();
        $code->type = 'token';
        $code->code = $token;
        $code->expires_at = $expires_at;
        $code->created_by = $campaign->created_by;

        $code->save();

        return response()->json([
            'status' => 'success',
            'token' => $token
        ]);
    }

    /**
     * Make sure code is unique
     *
     * @return boolean
     */
    public function getUniqueCode($type, $campaign_id)
    {
        if ($type === 'token') {
            $token = Str::random(8);
        }

        $code = Code::query()
            ->where('campaign_id', $campaign_id)
            ->where('type', $type)
            ->where('code', $token)
            ->first();

        if (! $code) {
            return $token;
        } else {
            return $this->getUniqueCode($type, $campaign_id);
        }
    }

    /**
     * Customer verifies code generated by merchant
     * @bodyParam uuid string required uuid of website. Example: 283ca865-a71c-4d4a-b8cb-8c46c5b3ca57
     * @bodyParam code string required Code.
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function postVerifyCustomerCode(Request $request)
    {
        $account = app()->make('account');

        $campaign = \Platform\Models\Campaign::withoutGlobalScopes()
            ->whereUuid(request('uuid', 0))
            ->firstOrFail();

        $code = $request->code;

        // Set language locale
        $locale = request('locale', config('system.default_language'));

        app()->setLocale($locale);

        // Find code
        $code = Code::query()
            ->where('code', $code)
            ->where('campaign_id', $campaign->id)
            ->where('type', 'customer')
            ->where('expires_at', '>', Carbon::now())
            ->first();

        if (! $code) {
            return response()->json([
                'status' => 'error',
                'errors' => [
                    'code' => trans('campaign.code_invalid_or_expired')
                ],
            ], JsonResponse::HTTP_BAD_REQUEST);
        }

        $customer = auth('customer')->user();

        $segments = $code->segments()->pluck('segments.id')->toArray();

        $countHistoryToday = History::query()
            ->where('campaign_id', $campaign->id)
            ->where('customer_id', $customer->id)
            ->where('points', '>' , 0)
            ->where('event', '!=', 'Sign up bonus')
            ->whereDate('created_at', Carbon::now())
            ->count();

        if ($countHistoryToday >= $campaign->credit_transaction_limit) {
            return response()->json([
                'status' => 'error',
                'errors' => [
                    'code' => 'The customer has reached the credit transaction limit.'
                ]
            ], JsonResponse::HTTP_BAD_REQUEST);
        }

        $history = new History;
        $history->customer_id = $customer->id;
        $history->campaign_id = $campaign->id;
        $history->staff_id = $code->staff_id;
        $history->staff_name = $code->staff_name;
        $history->staff_email = $code->staff_email;
        $history->points = $code->points;
        $history->event = 'Code entered by customer';
        $history->created_by = $campaign->created_by;
        $history->points_expired_date = Carbon::now()->addDays($campaign->user->points_expiry->points_expiry ?? config('system.default_points_expiry'));

        $history->save();

        $emailTemplate = EmailTemplate::query()
            ->where('name', 'customer_credit_point')
            ->where('created_by', $campaign->created_by)
            ->first();

        $login_url = $campaign->url . '/login';

        $cta_button = '<a href="'. $login_url .'" class="button button-primary" target="_blank">Login</a>';

        $variableTemplate = [
            '{{ website_name }}',
            '{{ website_url }}',
            '{{ login_button }}',
            '{{ login_url }}',
            '{{ point_got }}',
            '{{ current_point }}',
            '{{ event }}',
            '{{ name_of_user }}',
            '{{ email_of_user }}'
        ];

        $variableChange = [
            $campaign->name,
            $campaign->url,
            $cta_button,
            $login_url,
            $code->points,
            $customer->points,
            'Code entered by customer',
            $request->name,
            $request->email
        ];

        $email = new \stdClass;

        $email->website_name = $campaign->name;
        $email->website_url = $campaign->url;
        $email->from_name = $account->app_mail_name_from;
        $email->from_email = $account->app_mail_address_from;

        $email->to_name = $customer->name;
        $email->to_email = $customer->email;
        $email->subject = str_replace($variableTemplate, $variableChange, $emailTemplate->subject);
        $email->template = str_replace($variableTemplate, $variableChange, $emailTemplate->template);

        ProcessMerchantSendMail::dispatch(
            $email,
            $campaign->smtp_service_id
        )->onQueue('emails');

        if ($this->notifPusher->isAvailable()) {
            $this->notifPusher->pointCredited($customer, $code->points, 'Code entered by customer');
        }

        // Segments
        if (is_array($segments) && count($segments) > 0) {
            $history->segments()->sync($segments);
        }

        // Delete code
        $code->delete();

        return response()->json([
            'status' => 'success'
        ]);
    }

    /**
     * Merchant verifies generated code
     * @bodyParam uuid string required uuid of website. Example: 283ca865-a71c-4d4a-b8cb-8c46c5b3ca57
     * @bodyParam code string required Code.
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function postVerifyMerchantCode(Request $request)
    {
        $campaign = \Platform\Models\Campaign::withoutGlobalScopes()
            ->whereUuid(request('uuid', 0))
            ->firstOrFail();

        $code = $request->code;

        // Set language locale
        $locale = request('locale', config('system.default_language'));

        app()->setLocale($locale);

        // Find code
        $code = Code::query()
            ->where('code', $code)
            ->where('campaign_id', $campaign->id)
            ->where('type', 'merchant')
            ->where('expires_at', '>', Carbon::now())
            ->first();

        if (! $code) {
            return response()->json([
                'status' => 'error',
                'errors' => [
                    'code' => trans('campaign.code_invalid_or_expired')
                ]
            ], JsonResponse::HTTP_BAD_REQUEST);
        }

        // Code is correct, let merchant choose points and segments

        $customer = auth('customer')->user();

        $countHistoryToday = History::query()
            ->where('campaign_id', $campaign->id)
            ->where('customer_id', $customer->id)
            ->where('event', '!=', 'Sign up bonus')
            ->whereDate('created_at', Carbon::today())
            ->count();

        if ($countHistoryToday >= $campaign->credit_transaction_limit) {
            return response()->json([
                'status' => 'error',
                'errors' => [
                    'code' => 'The customer has reached the credit transaction limit.'
                ]
            ], JsonResponse::HTTP_BAD_REQUEST);
        }

        $segments = $campaign->business->segments->pluck('name', 'id');

        return response()->json([
            'status' => 'success',
            'segments' => $segments
        ]);
    }

    /**
     * Initially merhant code was correct, double check code and process points and segments
     * @bodyParam uuid string required uuid of website. Example: 283ca865-a71c-4d4a-b8cb-8c46c5b3ca57
     * @bodyParam code string required Code.
     * @bodyParam points integer required points.
     * @bodyParam segments integer[]. id of segments Example : [1, 2]
     *
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function postProcessMerchantEntry(Request $request)
    {
        $account = app()->make('account');

        $campaign = \Platform\Models\Campaign::withoutGlobalScopes()->whereUuid(request('uuid', 0))->firstOrFail();

        $code = $request->code;

        $points = $request->points;

        $segments = $request->segments;

        // Set language locale
        $locale = request('locale', config('system.default_language'));

        app()->setLocale($locale);

        // Find code
        $code = Code::query()
            ->where('code', $code)
            ->where('campaign_id', $campaign->id)
            ->where('type', 'merchant')
            ->where('expires_at', '>', Carbon::now())
            ->first();

        if (! $code) {
            return response()->json([
                'status' => 'error',
                'errors' => [
                    'code' => trans('campaign.code_invalid_or_expired'),
                ],
            ], JsonResponse::HTTP_BAD_REQUEST);
        }

        $customer = auth('customer')->user();

        $countHistoryToday = History::query()
            ->where('campaign_id', $campaign->id)
            ->where('customer_id', $customer->id)
            ->where('points', '>' , 0)
            ->where('event', '!=', 'Sign up bonus')
            ->whereDate('created_at', Carbon::today())
            ->count();

        if ($countHistoryToday >= $campaign->credit_transaction_limit) {
            return response()->json([
                'status' => 'error',
                'errors' => [
                    'code' => 'The customer has reached the credit transaction limit.'
                ]
            ], JsonResponse::HTTP_BAD_REQUEST);
        }

        // Code is correct, process points and segments

        $history = new History;
        $history->customer_id = $customer->id;
        $history->campaign_id = $campaign->id;
        $history->staff_id = $code->staff_id;
        $history->staff_name = $code->staff_name;
        $history->staff_email = $code->staff_email;
        $history->points = $points;
        $history->event = 'Code entered by staff member';
        $history->created_by = $campaign->created_by;
        $history->points_expired_date = Carbon::now()->addDays($campaign->user->points_expiry->points_expiry ?? config('system.default_points_expiry'));

        $history->save();

        $emailTemplate = EmailTemplate::query()
            ->where('name', 'customer_credit_point')
            ->where('created_by', $campaign->created_by)
            ->first();

        $login_url = $campaign->url . '/login';

        $cta_button = '<a href="'.$login_url.'" class="button button-primary" target="_blank">Login</a>';

        $variableTemplate = [
            '{{ website_name }}',
            '{{ website_url }}',
            '{{ login_button }}',
            '{{ login_url }}',
            '{{ point_got }}',
            '{{ current_point }}',
            '{{ event }}',
            '{{ name_of_user }}',
            '{{ email_of_user }}',
        ];

        $variableChange = [
            $campaign->name,
            $campaign->url,
            $cta_button,
            $login_url,
            $points,
            $customer->points,
            'Credited by staff member',
            $customer->name,
            $customer->email,
        ];

        $email = new \stdClass;

        $email->website_name = $campaign->name;
        $email->website_url = $campaign->url;
        $email->from_name = $account->app_mail_name_from;
        $email->from_email = $account->app_mail_address_from;

        $email->to_name = $customer->name;
        $email->to_email = $customer->email;
        $email->subject = str_replace($variableTemplate, $variableChange ,$emailTemplate->subject);
        $email->template = str_replace($variableTemplate, $variableChange ,$emailTemplate->template);

        // Mail::send(new \App\Mail\TemplateMail($email));
        ProcessMerchantSendMail::dispatch(
            $email,
            $campaign->smtp_service_id
        )->onQueue('emails');


        if ($this->notifPusher->isAvailable()) {
            $this->notifPusher->pointCredited($customer, $points, 'Code entered by staff member');
        }

        // Segments
        if (is_array($segments) && count($segments) > 0) {
            $history->segments()->sync($segments);
        }

        return response()->json([
            'status' => 'success'
        ]);
    }
}
